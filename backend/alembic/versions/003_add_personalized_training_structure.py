"""Add personalized training structure: plans, modules, submodules, training_slides

Revision ID: 003_personalized_training
Revises: 002_fix_password
Create Date: 2025-07-26 16:00:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import UUID, JSONB


# revision identifiers, used by Alembic.
revision: str = '003_personalized_training'
down_revision: Union[str, Sequence[str], None] = '002_fix_password'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema - Add personalized training structure."""
    
    # Learner Training Plans (5 stages fixes)
    op.create_table('learner_training_plans',
        sa.Column('id', UUID(as_uuid=True), primary_key=True),
        sa.Column('learner_session_id', UUID(as_uuid=True), sa.ForeignKey('learner_sessions.id'), nullable=False),
        sa.Column('current_slide_id', UUID(as_uuid=True), nullable=True),  # For session resumption
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.func.now(), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.func.now(), onupdate=sa.func.now(), nullable=False),
        # One plan per learner session
        sa.UniqueConstraint('learner_session_id', name='_one_plan_per_learner_session')
    )

    # Training Modules (variable per stage)
    op.create_table('training_modules',
        sa.Column('id', UUID(as_uuid=True), primary_key=True),
        sa.Column('plan_id', UUID(as_uuid=True), sa.ForeignKey('learner_training_plans.id', ondelete='CASCADE'), nullable=False),
        sa.Column('stage_number', sa.Integer, nullable=False),  # 1-5 (fixed stages)
        sa.Column('order_in_stage', sa.Integer, nullable=False),  # Order within stage
        sa.Column('title', sa.String, nullable=False),
        sa.Column('description', sa.Text),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.func.now(), nullable=False),
        # Ensure unique ordering within plan and stage
        sa.UniqueConstraint('plan_id', 'stage_number', 'order_in_stage', name='_unique_module_order_per_stage'),
        # Check stage_number is 1-5
        sa.CheckConstraint('stage_number >= 1 AND stage_number <= 5', name='_valid_stage_number')
    )

    # Training Submodules (variable per module)
    op.create_table('training_submodules',
        sa.Column('id', UUID(as_uuid=True), primary_key=True),
        sa.Column('module_id', UUID(as_uuid=True), sa.ForeignKey('training_modules.id', ondelete='CASCADE'), nullable=False),
        sa.Column('order_in_module', sa.Integer, nullable=False),  # Order within module
        sa.Column('title', sa.String, nullable=False),
        sa.Column('description', sa.Text),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.func.now(), nullable=False),
        # Ensure unique ordering within module
        sa.UniqueConstraint('module_id', 'order_in_module', name='_unique_submodule_order_per_module')
    )

    # Training Slides (pre-generated titles, content generated on-demand)
    op.create_table('training_slides',
        sa.Column('id', UUID(as_uuid=True), primary_key=True),
        sa.Column('submodule_id', UUID(as_uuid=True), sa.ForeignKey('training_submodules.id', ondelete='CASCADE'), nullable=False),
        sa.Column('order_in_submodule', sa.Integer, nullable=False),  # Order within submodule
        sa.Column('title', sa.String, nullable=False),  # Pre-generated by Gemini
        sa.Column('content', sa.Text, nullable=True),  # Generated on-demand when learner reaches slide
        sa.Column('generated_at', sa.DateTime(timezone=True), nullable=True),  # When content was generated
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.func.now(), nullable=False),
        # Ensure unique ordering within submodule
        sa.UniqueConstraint('submodule_id', 'order_in_submodule', name='_unique_slide_order_per_submodule')
    )

    # Add foreign key to current_slide_id after training_slides table creation
    op.create_foreign_key(
        'fk_current_slide',
        'learner_training_plans', 
        'training_slides',
        ['current_slide_id'], 
        ['id'],
        ondelete='SET NULL'
    )

    # Add indexes for performance
    op.create_index('idx_training_modules_plan_stage', 'training_modules', ['plan_id', 'stage_number'])
    op.create_index('idx_training_submodules_module', 'training_submodules', ['module_id'])
    op.create_index('idx_training_slides_submodule', 'training_slides', ['submodule_id'])
    op.create_index('idx_training_slides_generated', 'training_slides', ['generated_at'])


def downgrade() -> None:
    """Downgrade schema - Remove personalized training structure."""
    
    # Drop indexes
    op.drop_index('idx_training_slides_generated')
    op.drop_index('idx_training_slides_submodule')
    op.drop_index('idx_training_submodules_module')
    op.drop_index('idx_training_modules_plan_stage')
    
    # Drop tables in reverse order (respecting foreign key constraints)
    op.drop_table('training_slides')
    op.drop_table('training_submodules')
    op.drop_table('training_modules')
    op.drop_table('learner_training_plans')