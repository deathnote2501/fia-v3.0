"""
FIA v3.0 - Learner Training Plan Entity
Pure domain entity for learner training plans business logic
"""

from dataclasses import dataclass
from datetime import datetime
from typing import Optional, Dict, Any
from uuid import UUID, uuid4


@dataclass
class LearnerTrainingPlan:
    """Pure domain entity for learner training plans with AI-generated plan data"""
    
    learner_session_id: UUID
    plan_data: Dict[str, Any]  # The generated training plan structure
    generation_method: str  # 'vertex_ai', 'gemini', 'manual'
    id: Optional[UUID] = None
    tokens_used: Optional[int] = None
    generation_time_seconds: Optional[int] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    
    def __post_init__(self):
        """Initialize defaults after dataclass creation"""
        if self.id is None:
            self.id = uuid4()
        if self.created_at is None:
            self.created_at = datetime.utcnow()
        if self.updated_at is None:
            self.updated_at = datetime.utcnow()
    
    def update_plan_data(self, new_plan_data: Dict[str, Any]) -> None:
        """Update the plan data and timestamp"""
        self.plan_data = new_plan_data
        self.updated_at = datetime.utcnow()
    
    def get_total_slides(self) -> int:
        """Calculate total number of slides in the plan"""
        if not self.plan_data or "training_plan" not in self.plan_data:
            return 0
        
        total = 0
        stages = self.plan_data.get("training_plan", {}).get("stages", [])
        for stage in stages:
            modules = stage.get("modules", [])
            for module in modules:
                submodules = module.get("submodules", [])
                for submodule in submodules:
                    total += submodule.get("slide_count", 0)
        return total
    
    def get_stage_count(self) -> int:
        """Get number of stages in the plan"""
        if not self.plan_data or "training_plan" not in self.plan_data:
            return 0
        return len(self.plan_data.get("training_plan", {}).get("stages", []))
    
    def validate(self) -> None:
        """Validate the training plan data"""
        if not self.learner_session_id:
            raise ValueError("Learner session ID is required")
        if not isinstance(self.learner_session_id, UUID):
            raise ValueError("Learner session ID must be a valid UUID")
        if not self.plan_data:
            raise ValueError("Plan data is required")
        if not isinstance(self.plan_data, dict):
            raise ValueError("Plan data must be a dictionary")
        if not self.generation_method:
            raise ValueError("Generation method is required")
        if self.generation_method not in ['vertex_ai', 'gemini', 'manual', 'fallback']:
            raise ValueError("Generation method must be one of: vertex_ai, gemini, manual, fallback")
    
    def is_ai_generated(self) -> bool:
        """Check if the plan was generated by AI"""
        return self.generation_method in ['vertex_ai', 'gemini']