#!/usr/bin/env python3
"""
Test script pour valider l'endpoint de simplification des slides
Usage: python test_simplify_endpoint.py
"""

import requests
import json
import sys

# Configuration
BASE_URL = "http://localhost:8000"
TIMEOUT = 30

def print_test_header(test_name: str):
    """Afficher l'en-t√™te d'un test"""
    print(f"\n{'='*60}")
    print(f"üß™ TEST: {test_name}")
    print('='*60)

def print_success(message: str):
    """Afficher un message de succ√®s"""
    print(f"‚úÖ {message}")

def print_error(message: str):
    """Afficher un message d'erreur"""
    print(f"‚ùå {message}")

def print_info(message: str):
    """Afficher une information"""
    print(f"‚ÑπÔ∏è  {message}")

def test_simplify_endpoint():
    """Tester l'endpoint de simplification"""
    print_test_header("Slide Simplify Endpoint Test")
    
    # Test data - contenu markdown complexe √† simplifier
    test_learner_session_id = "aac104a4-dd4e-45de-98bf-e361dae11625"
    test_content = """# Introduction √† l'Intelligence Artificielle G√©n√©rative

## D√©finition et Concepts Fondamentaux

L'intelligence artificielle g√©n√©rative repr√©sente une r√©volution technologique majeure qui transforme fondamentalement la mani√®re dont nous cr√©ons, interagissons et conceptualisons le contenu num√©rique. Cette technologie sophistiqu√©e utilise des algorithmes d'apprentissage automatique avanc√©s, notamment les r√©seaux de neurones profonds, pour analyser d'immenses corpus de donn√©es textuelles, visuelles ou multimodales afin de g√©n√©rer du nouveau contenu original et coh√©rent.

### Caract√©ristiques Techniques Principales

- **Apprentissage profond (Deep Learning)** : Utilisation de r√©seaux de neurones multicouches
- **Mod√®les transformateurs** : Architecture r√©volutionnaire pour le traitement du langage naturel
- **Entra√Ænement sur donn√©es massives** : Billions de param√®tres optimis√©s sur des t√©raoctets de donn√©es
- **Capacit√©s multimodales** : G√©n√©ration simultan√©e de texte, images, audio et vid√©o

## Applications Industrielles et Sectorielles

### Secteur Financier et Bancaire
- Automatisation de la r√©daction de rapports d'analyse financi√®re
- G√©n√©ration de synth√®ses √©conomiques personnalis√©es
- Cr√©ation de contenu marketing adapt√© aux diff√©rents segments client√®le
- Analyse pr√©dictive et mod√©lisation de sc√©narios √©conomiques complexes

### Domaine M√©dical et de la Sant√©
- Assistance √† la r√©daction de dossiers m√©dicaux
- G√©n√©ration de recommandations th√©rapeutiques personnalis√©es
- Cr√©ation de contenu √©ducatif pour la formation continue des professionnels

> **Citation d'expert** : "L'IA g√©n√©rative n'est pas seulement un outil, c'est un partenaire cr√©atif qui augmente nos capacit√©s humaines tout en pr√©servant notre unicit√© cr√©ative." - Dr. Sarah Chen, Directrice de Recherche en IA

## D√©fis √âthiques et Consid√©rations Strat√©giques

L'impl√©mentation de l'IA g√©n√©rative soul√®ve des questions fondamentales concernant l'authenticit√©, la propri√©t√© intellectuelle, et l'impact soci√©tal. Les organisations doivent d√©velopper des frameworks √©thiques robustes pour naviguer ces nouveaux territoires technologiques."""

    request_data = {
        "current_content": test_content
    }
    
    try:
        print_info(f"Calling POST /api/slides/simplify/{test_learner_session_id}")
        print_info(f"Content length: {len(test_content)} characters")
        print_info(f"Content preview: {test_content[:100]}...")
        
        response = requests.post(
            f"{BASE_URL}/api/slides/simplify/{test_learner_session_id}",
            json=request_data,
            timeout=TIMEOUT
        )
        
        print_info(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            print_success("‚úÖ Status code correct: 200")
            
            try:
                response_data = response.json()
                print_info(f"Response keys: {list(response_data.keys())}")
                
                if response_data.get("success"):
                    print_success("API returned success=true")
                    
                    data = response_data.get("data", {})
                    simplified_content = data.get("simplified_content")
                    
                    if simplified_content:
                        print_success("Simplified content received!")
                        print_info(f"Original length: {data.get('original_length', 'N/A')}")
                        print_info(f"Simplified length: {data.get('simplified_length', 'N/A')}")
                        print_info(f"Processing time: {data.get('processing_time', 'N/A')}s")
                        print_info(f"Simplified preview: {simplified_content[:200]}...")
                        
                        # V√©rifier que le contenu est effectivement simplifi√©
                        if len(simplified_content) < len(test_content):
                            print_success("Content was successfully reduced in size")
                        else:
                            print_error("Content was not reduced in size")
                            
                        return True
                    else:
                        print_error("No simplified_content in response")
                        return False
                else:
                    print_error(f"API returned success=false: {response_data.get('message', 'No message')}")
                    return False
                    
            except json.JSONDecodeError as e:
                print_error(f"Invalid JSON response: {str(e)}")
                print_info(f"Response text: {response.text[:200]}...")
                return False
                
        else:
            print_error(f"Status code incorrect: {response.status_code}")
            print_info(f"Response text: {response.text[:200]}...")
            return False
            
    except requests.exceptions.RequestException as e:
        print_error(f"Request failed: {str(e)}")
        return False

def test_health_check():
    """Tester le health check des slides"""
    print_test_header("Slide Service Health Check")
    
    try:
        response = requests.get(f"{BASE_URL}/api/slides/health", timeout=TIMEOUT)
        print_info(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print_success("Health check passed")
            print_info(f"Service status: {data.get('status', 'unknown')}")
            return True
        else:
            print_error(f"Health check failed: {response.status_code}")
            return False
            
    except Exception as e:
        print_error(f"Health check error: {str(e)}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ Starting slide simplify endpoint testing...")
    
    # Test 1: Health check
    health_ok = test_health_check()
    
    # Test 2: Simplify endpoint
    simplify_ok = test_simplify_endpoint()
    
    # R√©sum√©
    print_test_header("R√âSUM√â DES TESTS")
    
    tests_results = {
        "Health Check": health_ok,
        "Simplify Endpoint": simplify_ok
    }
    
    passed = sum(tests_results.values())
    total = len(tests_results)
    
    print(f"\nüéØ R√âSULTATS: {passed}/{total} tests pass√©s")
    
    for test_name, passed in tests_results.items():
        status = "‚úÖ" if passed else "‚ùå"
        print(f"{status} {test_name}")
    
    if passed == total:
        print("\nüéâ Tous les tests sont r√©ussis ! L'endpoint de simplification fonctionne correctement.")
        return 0
    else:
        print(f"\n‚ö†Ô∏è {total - passed} test(s) √©chou√©(s). V√©rifiez les logs ci-dessus.")
        return 1

if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Tests interrompus par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå Erreur inattendue: {str(e)}")
        sys.exit(1)