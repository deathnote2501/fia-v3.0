// Test simple du chargement de contexte
// Node.js test pour v√©rifier la logique de base

const fetch = require('node-fetch');

// Mock de la classe GeminiLiveAPI pour les tests Node.js
class GeminiLiveAPITest {
    constructor() {
        this.learnerContext = null;
        this.learnerSessionId = null;
        this.defaultSystemInstruction = "Tu es un assistant vocal empathique et utile. Parle naturellement en fran√ßais, adapte ton ton √† l'humeur de l'utilisateur, reste concis et clair.";
    }
    
    log(category, message, data = null) {
        const ts = new Date().toISOString();
        const msg = `[${ts}] [${category}] ${message}`;
        if (data !== null) console.log(msg, data); else console.log(msg);
    }
    
    async loadLearnerContext(sessionId) {
        if (!sessionId) {
            this.log('CONTEXT', '‚ö†Ô∏è No session ID provided, using default context');
            this.learnerContext = null;
            this.learnerSessionId = null;
            return null;
        }
        
        try {
            this.log('CONTEXT', `üéØ Loading context for session: ${sessionId}`);
            
            const response = await fetch(`http://localhost:8000/api/config/live-context/${sessionId}`);
            if (!response.ok) {
                throw new Error(`Failed to load context: ${response.status} ${response.statusText}`);
            }
            
            const contextData = await response.json();
            this.learnerContext = contextData;
            this.learnerSessionId = sessionId;
            
            this.log('CONTEXT', `‚úÖ Context loaded for ${contextData.learner_profile?.niveau || 'unknown'} level learner`);
            this.log('CONTEXT', `Current slide: ${contextData.slide_title || 'No specific slide'}`);
            
            return contextData;
            
        } catch (error) {
            this.log('CONTEXT', '‚ùå Failed to load learner context', error.message);
            this.learnerContext = null;
            this.learnerSessionId = sessionId;
            return null;
        }
    }
    
    getSystemInstruction() {
        if (!this.learnerContext || !this.learnerContext.system_instruction) {
            this.log('CONTEXT', 'üìù Using default system instruction');
            return this.defaultSystemInstruction;
        }
        
        this.log('CONTEXT', 'üìù Using personalized system instruction');
        return this.learnerContext.system_instruction;
    }
}

// Test principal
async function testContextLoading() {
    console.log('üß™ D√©marrage des tests de chargement de contexte');
    
    const api = new GeminiLiveAPITest();
    const testSessionId = '58368a0d-e0ea-4bba-98a9-37982672b334';
    
    // Test 1: Chargement de contexte avec session ID valide
    console.log('\nüìã Test 1: Chargement contexte avec session ID valide');
    const context = await api.loadLearnerContext(testSessionId);
    
    if (context) {
        console.log('‚úÖ Test 1 PASSED: Contexte charg√© avec succ√®s');
        console.log(`   - Session ID: ${context.learner_session_id}`);
        console.log(`   - Niveau: ${context.learner_profile?.niveau}`);
        console.log(`   - System instruction length: ${context.system_instruction?.length} chars`);
    } else {
        console.log('‚ùå Test 1 FAILED: Contexte non charg√©');
    }
    
    // Test 2: System instruction personnalis√©e
    console.log('\nüìù Test 2: System instruction personnalis√©e');
    const instruction = api.getSystemInstruction();
    
    if (instruction && instruction !== api.defaultSystemInstruction) {
        console.log('‚úÖ Test 2 PASSED: System instruction personnalis√©e utilis√©e');
        console.log(`   - Length: ${instruction.length} chars`);
        console.log(`   - Preview: ${instruction.substring(0, 100)}...`);
    } else {
        console.log('‚ùå Test 2 FAILED: System instruction par d√©faut utilis√©e');
    }
    
    // Test 3: Chargement avec session ID invalide
    console.log('\nüö´ Test 3: Chargement avec session ID invalide');
    const invalidContext = await api.loadLearnerContext('invalid-uuid');
    
    if (!invalidContext && api.learnerContext === null) {
        console.log('‚úÖ Test 3 PASSED: Gestion d\'erreur correcte pour UUID invalide');
    } else {
        console.log('‚ùå Test 3 FAILED: Gestion d\'erreur incorrecte');
    }
    
    // Test 4: System instruction par d√©faut apr√®s √©chec
    console.log('\nüîÑ Test 4: System instruction par d√©faut apr√®s √©chec');
    const defaultInstruction = api.getSystemInstruction();
    
    if (defaultInstruction === api.defaultSystemInstruction) {
        console.log('‚úÖ Test 4 PASSED: Retour √† l\'instruction par d√©faut apr√®s √©chec');
    } else {
        console.log('‚ùå Test 4 FAILED: Instruction par d√©faut non utilis√©e apr√®s √©chec');
    }
    
    console.log('\nüéâ Tests termin√©s');
}

// Ex√©cuter les tests
testContextLoading().catch(console.error);